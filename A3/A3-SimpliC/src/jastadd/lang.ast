Program ::= Fun*;

Fun ::= TypeDecl IdDecl Param Block;
Param ::= ParamStmt*;
Block ::= Stmt*;

abstract ParamStmt;
ParamDecl: ParamStmt ::= TypeDecl IdDecl;

abstract Stmt;
AssignStmt: Stmt ::= ID Expr;
DeclStmt: Stmt ::= TypeDecl IdDecl [Expr];
WhileStmt: Stmt ::= Expr Block;
IfStmt: Stmt ::= Expr If:Block [Else:Block];
ReturnStmt: Stmt ::= Expr;
ExprStmt: Stmt ::= Expr;

abstract Expr;
ID: Expr ::= <ID>;
Literal: Expr ::= <NUMERAL>;
FunCall: Expr ::= <ID> Expr*;
BinExpr: Expr ::= Left:Expr Right:Expr;
Mul: BinExpr;
Div: BinExpr;
Plus: BinExpr;
Sub: BinExpr;
Mod: BinExpr;
Equal: BinExpr;
NotEqual: BinExpr;
Less: BinExpr;
Greater: BinExpr;
LessEqual: BinExpr;
GreaterEqual: BinExpr;

TypeDecl ::= <Type>;
IdDecl ::= <Decl>;
