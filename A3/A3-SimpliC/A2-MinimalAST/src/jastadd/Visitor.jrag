aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(Program node, Object data);
		public Object visit(Fun node, Object data);
		public Object visit(Param node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);

		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Plus node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Mod node, Object data);

		public Object visit(Equal node, Object data);
		public Object visit(NotEqual node, Object data);
		public Object visit(Less node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(LessEqual node, Object data);
		public Object visit(GreaterEqual node, Object data);

		public Object visit(AssignStmt node, Object data);
		public Object visit(DeclStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(ExprStmt node, Object data);

		public Object visit(Literal node, Object data);
		public Object visit(TypeDecl node, Object data);
		public Object visit(ParamDecl node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(ID node, Object data);
		public Object visit(FunCall node, Object data);

	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object Program.accept(Visitor visitor, Object data) {
	return visitor.visit(this, data);
	}
	public Object Fun.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Param.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Plus.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Less.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Greater.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LessEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object AssignStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object DeclStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ReturnStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ExprStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Literal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ParamDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object TypeDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object ID.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
