Program ::= Fun*;

Fun ::= Type IdDecl Param Block;
Param ::= ParamDecl*;
Block : Stmt ::= Stmt*;

ParamDecl ::= Type IdDecl;

abstract Type;
IntType : Type ::= <ID>;
BoolType : Type ::= <ID>;
UnknownType : Type ::= <ID>;

abstract Stmt;
AssignStmt: Stmt ::= IdUse Expr;
DeclStmt: Stmt ::= Type IdDecl [Expr];
WhileStmt: Stmt ::= Expr Block;
IfStmt: Stmt ::= Expr If:Block [Else:Block];
ReturnStmt: Stmt ::= Expr;
ExprStmt: Stmt ::= Expr;

abstract Expr;
IdUse : Expr ::= <ID>;
IdDecl : Expr ::= <ID>;
UnknownDecl : IdDecl;
Literal: Expr ::= <NUMERAL>;
FunCall: Expr ::= IdUse Expr*;

ArithmeticExpr : Expr ::= Left:Expr Right:Expr;
Mul: ArithmeticExpr;
Div: ArithmeticExpr;
Plus: ArithmeticExpr;
Sub: ArithmeticExpr;
Mod: ArithmeticExpr;

BoolExpr : Expr ::= Left:Expr Right:Expr;
Equal: BoolExpr;
NotEqual: BoolExpr;
Less: BoolExpr;
Greater: BoolExpr;
LessEqual: BoolExpr;
GreaterEqual: BoolExpr;
