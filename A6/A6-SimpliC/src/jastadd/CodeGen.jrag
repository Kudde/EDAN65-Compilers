/**
 * Simple code generation for the Calc language (EDAN65 course labs).
 * @author ?
 */
aspect CodeGen {

	// ----------------------------------------------------------------------------
	// PROGRAM---------------------------------------------------------------------
	// ----------------------------------------------------------------------------

	public void Program.genCode(PrintStream out) {
		out.println(".global _start");
		out.println(".data");
		out.println("ask_message: .ascii \"Please enter a number: \"");
		out.println("ask_msg_len: .quad 23");
		out.println("buf: .skip 1024");
		out.println();
		out.println(".text");
		out.println("_start:");
        out.println("        call main");
        out.println("				 call _exit");

		for (Fun f : getFuns()) {
			f.genCode(out);
		}

		out.println("# Procedure to read number from stdin.");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # sys_read(0, buf, 1024)");
		out.println("        ### Convert string to integer (atoi).");
		out.println("        ### RAX = string length (nchar)");
		out.println("        ### RSI = string pointer");
		out.println("        movq $0, %rdx           # sum <- 0");
		out.println("        cmpq $0, %rax           # if (nchar > 0)");
		out.println("        jle atoi_done           # nchar <= 0");
		out.println("        movq %rsi, %rdi         # copy RSI to RDI for sign check later");
		out.println("        movb (%rsi), %ch        # look at first char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne atoi_loop");
		out.println("        incq %rsi               # skip sign char");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
		out.println("        cmpq $0x30, %rcx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rcx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rcx        # value of character");
		out.println("        addq %rcx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # put result value in RAX");
		out.println("        movb (%rdi), %ch        # check sign char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne read_end");
		out.println("        negq %rax               # negate result due to sign char");
		out.println("read_end:");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout.");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### Convert integer to string (itoa).");
		out.println("        movq 16(%rbp), %rax");
		out.println("        movq $(buf+1023), %rsi  # RSI = write pointer (starts at end of buffer)");
		out.println("        movb $0x0A, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # RCX = string length");
		out.println("        cmpq $0, %rax");
		out.println("        jge itoa_loop");
		out.println("        negq %rax               # negate to make RAX positive");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rdi");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rdi              # divide RDX:RAX by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq 16(%rbp), %rax");
		out.println("        cmpq $0, %rax");
		out.println("        jge print_end");
		out.println("        decq %rsi");
		out.println("        incq %rcx");
		out.println("        movb $0x2D, (%rsi)");
		out.println("print_end:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println(" ret");
		out.println("_exit:"); 		//EXIT
		out.println("        movq $0, %rdi");
		out.println("        movq $60, %rax");
		out.println("        syscall"); // Done!
	}

	public void Fun.genCode(PrintStream out) {
		out.println(getIdDecl().getID() + ":");

		// Locals
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println(" subq $" + (getBlock().numLocals()*8) + ", %rsp");

		getBlock().genCode(out);

		//Kill locals
		out.println("        movq %rbp, %rsp");
		out.println(" popq %rbp");

		out.println("        movq $0, %rax");
		out.println(" ret");
	}

	public void Block.genCode(PrintStream out) {
		for (Stmt s : getStmts())
			s.genCode(out);
	}

	// ----------------------------------------------------------------------------
	// STATEMENTS------------------------------------------------------------------
	// ----------------------------------------------------------------------------

	public void Stmt.genCode(PrintStream out) {}

	public void ExprStmt.genCode(PrintStream out) {
		getExpr().genCode(out);
	}

	public void ReturnStmt.genCode(PrintStream out) {
		getExpr().genCode(out);
		out.println("        movq %rbp, %rsp");
		out.println(" 			 popq %rbp");
		out.println(" 			 ret");
	}


	public void IfStmt.genCode(PrintStream out) {
			 getExpr().genCode(out);
			 String prefix = funName() + "_s_" + index();
			 out.println(prefix + (hasElse() ? "_else" : "_fi"));
			 getIf().genCode(out);
			 out.println("        jmp " + prefix + "_fi");
			 if (hasElse()) {
					 out.println(prefix + "_else:");
					 getElse().genCode(out);
			 }
			 out.println(prefix + "_fi:");
	}

	public void WhileStmt.genCode(PrintStream out) {
		String prefix = funName() + "_s_" + index();
		out.println(prefix + "loop:");
		getExpr().genCode(out);
		out.print("done" + prefix);
		out.println();
		getBlock().genCode(out);
		out.println("        jmp " + prefix + "loop");
		out.println("done" + prefix +  ":");
	}
	public void DeclStmt.genCode(PrintStream out) {
			 if (!hasExpr()) return;
			 getExpr().genCode(out);
			 out.println("        movq %rax, " + getIdDecl().address());
	 }

	 public void AssignStmt.genCode(PrintStream out) {
			 getExpr().genCode(out);
			 out.println("        movq %rax, " + getIdUse().decl().address());
}

	inh int Stmt.index();
	eq Block.getStmt(int index).index() = index;

	inh String Stmt.funName();
	eq Fun.getBlock().funName() = getIdDecl().getID();

	// ----------------------------------------------------------------------------
	// EXPRESSIONS-----------------------------------------------------------------
	// ----------------------------------------------------------------------------

	public void Expr.genCode(PrintStream out) {}
	public void Expr.genEval(PrintStream out) {}

	public void ArithmeticExpr.genEval(PrintStream out) {}
	public void ArithmeticExpr.genCode(PrintStream out) {
    getLeft().genCode(out);
		out.println("        pushq %rax");
		getRight().genCode(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
    genEval(out);
	}
	public void Plus.genEval(PrintStream out) {
		out.println("        addq %rbx, %rax");
	 }
	public void Sub.genEval(PrintStream out) {
		out.println("        subq %rbx, %rax");
	 }
 	public void Mul.genEval(PrintStream out) {
		out.println("        imulq %rbx, %rax");
	 }
	 public void Div.genEval(PrintStream out) {
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division
	 	out.println("        idivq %rbx");
	 }
	 public void Mod.genEval(PrintStream out) {
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division
	  out.println("        idivq %rbx");
		out.println("        movq %rdx, %rax");
}

	public  void BoolExpr.genEval(PrintStream out) {}
	public void BoolExpr.genCode(PrintStream out) {
        getLeft().genCode(out);
 			 	out.println("        pushq %rax");
 				getRight().genCode(out);
 			 	out.println("        movq %rax, %rdx");
 		 		out.println("        popq %rax");
        out.println("        cmpq %rdx, %rax");
        genEval(out);
     }

     public void Equal.genEval(PrintStream out) {
         out.print("        jne ");
     }
     public void NotEqual.genEval(PrintStream out) {
         out.print("        je ");
     }
     public void Greater.genEval(PrintStream out) {
         out.print("        jl ");
     }
     public void Less.genEval(PrintStream out) {
         out.print("        jg ");
     }
     public void GreaterEqual.genEval(PrintStream out) {
         out.print("        jle ");
     }
     public void LessEqual.genEval(PrintStream out) {
         out.print("        jge ");
 }




 // ----------------------------------------------------------------------------
 // UTIL------------------------------------------------------------------------
 // ----------------------------------------------------------------------------

	public void FunCall.genCode(PrintStream out) {
		for (int i = getNumExpr() - 1; i >= 0; --i) {
			getExpr(i).genCode(out);
			out.println("				pushq %rax");
		}
		out.println("				call " + getIdUse().getID());
		if (getNumExpr() != 0) {
    	out.println("        addq $" + (8 * getNumExpr()) + ", %rsp");
		}
	}

	public void IdUse.genCode(PrintStream out) {
		out.println("        movq " + decl().address() + ", %rax");
	}
	public void Literal.genCode(PrintStream out) {
		out.println("        movq $" + getNUMERAL() + ", %rax");
	}


		inh boolean IdDecl.isParam();
		eq Program.getChild().isParam() = false;
		eq Fun.getIdDecl().isParam() = false;
		eq Param.getParamDecl(int index).isParam() = true;
		eq DeclStmt.getIdDecl().isParam() = false;

		// ----------------------------------------------------------------------------
		// IndexStuff------------------------------------------------------------------
		// ----------------------------------------------------------------------------
		syn String IdDecl.address() {
			return isParam() ? localIndex() * 8 + "(%rbp)"
			: "-"+(localIndex()*8)+"(%rbp)";
		}

	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
  eq Fun.localIndex() = 0;
  inh int Block.localIndex();
  eq Fun.getBlock().localIndex() = 0;
	eq IdDecl.localIndex() = prevNode().localIndex() + 1;

	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;

}
